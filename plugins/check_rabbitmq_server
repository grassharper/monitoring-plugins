#!/usr/bin/env python3

# check_rabbitmq_server
#
# Copyright (c) <2023>, <Andrei Buzoianu>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Use the output of rabbitmqctl status to get resource usage of this node

# Author: Andrei Buzoianu <andrei@buzoianu.info>
# 2023-01-20 Version 0.2

import sys
import json
from distutils.spawn import find_executable
from os import getuid
from subprocess import check_output
from optparse import OptionParser

def main ():
    # Nagios status codes
    STATE_OK = 0
    STATE_WARNING = 1
    STATE_CRITICAL = 2
    STATE_UNKNOWN = 3

    parser = OptionParser(usage="usage: %prog -t type -w limit -c limit", version="%prog 0.2")
    parser.add_option("-t", "--type",dest="type", metavar="STRING", type="string", help="type can be one of the following: memory, disk, sockets, processes or file_descriptors")
    parser.add_option("-w", "--warning", dest="warn", metavar="INT", type="int", help="warning percentage value")
    parser.add_option("-c", "--critical", dest="crit", metavar="INT", type="int", help="critical percentage value")
    (options, args) = parser.parse_args()

    if len(sys.argv[1:]) != 6:
        parser.print_help()
        sys.exit(STATE_UNKNOWN)

    # check for known type
    if not (options.type == 'memory' or options.type == 'disk' or options.type == 'sockets' or options.type == 'processes' or options.type == 'file_descriptors'):
        sys.stdout.write("Status : FAIL - unknown type\n")
        sys.exit(STATE_UNKNOWN)

    # check for valid warning and critical values
    CRIT = int(options.crit)
    WARN = int(options.warn)

    if CRIT < WARN:
        sys.stdout.write("Status : FAIL - Warning value can't be greater than critical value\n")
        sys.exit(STATE_UNKNOWN)

    check_command = ['/usr/sbin/rabbitmqctl', '-q', 'status', '--formatter', "json"]

    # If non-root run with sudo
    if getuid() != 0:
        check_command.insert(0, find_executable('sudo'))

    try:
        status = check_output(check_command)
    except Exception as exc:
        sys.stdout.write("Status : FAIL\n")
        sys.exit(STATE_UNKNOWN)

    # Decode this into a python object
    status = json.loads(status)

    def percentage(value, whole):
        return 100 * float(value)/float(whole)

    def get_memory():
        tmem_erlang = status["memory"]["total"]["rss"]
        tmem_rss = status["memory"]["total"]["rss"]
        tmem_allocated = status["memory"]["total"]["rss"]

        mem_allocated_unused = status["memory"]["allocated_unused"]
        mem_atom = status["memory"]["atom"]
        mem_binary = status["memory"]["binary"]
        mem_code = status["memory"]["code"]
        mem_connection_channels = status["memory"]["connection_channels"]
        mem_connection_other = status["memory"]["connection_other"]
        mem_connection_readers = status["memory"]["connection_readers"]
        mem_connection_writers = status["memory"]["connection_writers"]
        mem_metrics = status["memory"]["metrics"]
        mem_mgmt_db = status["memory"]["mgmt_db"]
        mem_mnesia = status["memory"]["mnesia"]
        mem_msg_index = status["memory"]["msg_index"]
        mem_other_ets = status["memory"]["other_ets"]
        mem_other_proc = status["memory"]["other_proc"]
        mem_other_system = status["memory"]["other_system"]
        mem_plugins = status["memory"]["plugins"]
        mem_queue_procs = status["memory"]["queue_procs"]
        mem_queue_slave_procs = status["memory"]["queue_slave_procs"]
        mem_quorum_ets = status["memory"]["quorum_ets"]
        mem_quorum_queue_dlx_procs = status["memory"]["quorum_queue_dlx_procs"]
        mem_quorum_queue_procs = status["memory"]["quorum_queue_procs"]
        mem_reserved_unallocated = status["memory"]["reserved_unallocated"]
        mem_stream_queue_coordinator_procs = status["memory"]["stream_queue_coordinator_procs"]
        mem_stream_queue_procs = status["memory"]["stream_queue_procs"]
        mem_stream_queue_replica_reader_procs = status["memory"]["stream_queue_replica_reader_procs"]

        memlimit = status["vm_memory_high_watermark_limit"]

        if status["vm_memory_calculation_strategy"] == 'erlang':
            mem = percentage(tmem_erlang, memlimit)
        elif status["vm_memory_calculation_strategy"] == "rss":
            mem = percentage(tmem_rss, memlimit)
        elif status["vm_memory_calculation_strategy"] == "allocated":
            mem = percentage(tmem_allocated, memlimit)

        if mem >= CRIT:
            sys.stdout.write("RabbitMQ Memory CRITICAL - more than %s%% used memory | vm_memory_high_watermark_limit=%s total_erlang=%s total_rss=%s total_allocated=%s allocated_unused=%s atom=%s binary=%s code=%s connection_channels=%s connection_other=%s connection_readers=%s connection_writers=%s metrics=%s mgmt_db=%s mnesia=%s msg_index=%s other_ets=%s other_proc=%s other_system=%s plugins=%s queue_procs=%s queue_slave_procs=%s quorum_ets=%s quorum_queue_dlx_procs=%s quorum_queue_procs=%s reserved_unallocated=%s stream_queue_coordinator_procs=%s stream_queue_procs=%s stream_queue_replica_reader_procs=%s\n" % (CRIT, memlimit, tmem_erlang, tmem_rss, tmem_allocated, mem_allocated_unused, mem_atom, mem_binary, mem_code, mem_connection_channels, mem_connection_other, mem_connection_readers, mem_connection_writers, mem_metrics, mem_mgmt_db, mem_mnesia, mem_msg_index, mem_other_ets, mem_other_proc, mem_other_system, mem_plugins, mem_queue_procs, mem_queue_slave_procs, mem_quorum_ets, mem_quorum_queue_dlx_procs, mem_quorum_queue_procs, mem_reserved_unallocated, mem_stream_queue_coordinator_procs, mem_stream_queue_procs, mem_stream_queue_replica_reader_procs))
            sys.exit(STATE_CRITICAL)
        if mem >= WARN:
            sys.stdout.write("RabbitMQ Memory WARNING - more than %s%% used memory | vm_memory_high_watermark_limit=%s total_erlang=%s total_rss=%s total_allocated=%s allocated_unused=%s atom=%s binary=%s code=%s connection_channels=%s connection_other=%s connection_readers=%s connection_writers=%s metrics=%s mgmt_db=%s mnesia=%s msg_index=%s other_ets=%s other_proc=%s other_system=%s plugins=%s queue_procs=%s queue_slave_procs=%s quorum_ets=%s quorum_queue_dlx_procs=%s quorum_queue_procs=%s reserved_unallocated=%s stream_queue_coordinator_procs=%s stream_queue_procs=%s stream_queue_replica_reader_procs=%s\n" % (WARN, memlimit, tmem_erlang, tmem_rss, tmem_allocated, mem_allocated_unused, mem_atom, mem_binary, mem_code, mem_connection_channels, mem_connection_other, mem_connection_readers, mem_connection_writers, mem_metrics, mem_mgmt_db, mem_mnesia, mem_msg_index, mem_other_ets, mem_other_proc, mem_other_system, mem_plugins, mem_queue_procs, mem_queue_slave_procs, mem_quorum_ets, mem_quorum_queue_dlx_procs, mem_quorum_queue_procs, mem_reserved_unallocated, mem_stream_queue_coordinator_procs, mem_stream_queue_procs, mem_stream_queue_replica_reader_procs))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Memory OK - %s%% used memory | vm_memory_high_watermark_limit=%s total_erlang=%s total_rss=%s total_allocated=%s allocated_unused=%s atom=%s binary=%s code=%s connection_channels=%s connection_other=%s connection_readers=%s connection_writers=%s metrics=%s mgmt_db=%s mnesia=%s msg_index=%s other_ets=%s other_proc=%s other_system=%s plugins=%s queue_procs=%s queue_slave_procs=%s quorum_ets=%s quorum_queue_dlx_procs=%s quorum_queue_procs=%s reserved_unallocated=%s stream_queue_coordinator_procs=%s stream_queue_procs=%s stream_queue_replica_reader_procs=%s\n" % (mem, memlimit, tmem_erlang, tmem_rss, tmem_allocated, mem_allocated_unused, mem_atom, mem_binary, mem_code, mem_connection_channels, mem_connection_other, mem_connection_readers, mem_connection_writers, mem_metrics, mem_mgmt_db, mem_mnesia, mem_msg_index, mem_other_ets, mem_other_proc, mem_other_system, mem_plugins, mem_queue_procs, mem_queue_slave_procs, mem_quorum_ets, mem_quorum_queue_dlx_procs, mem_quorum_queue_procs, mem_reserved_unallocated, mem_stream_queue_coordinator_procs, mem_stream_queue_procs, mem_stream_queue_replica_reader_procs))

    def get_disk():
        diskfree = status["disk_free"]
        diskfreelimit = status["disk_free_limit"]

        disk = percentage(diskfreelimit, diskfree)
        if disk >= CRIT:
            sys.stdout.write("RabbitMQ Disk CRITICAL - limit reached %s%% of free disk | diskfree=%s diskfreelimit=%s\n" % (CRIT, diskfree, diskfreelimit))
            sys.exit(STATE_CRITICAL)
        if disk >= WARN:
            sys.stdout.write("RabbitMQ Disk WARNING - limit reached %s%% of free disk| diskfree=%s diskfreelimit=%s\n" % (WARN, diskfree, diskfreelimit))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Memory OK - %s%% of free disk | diskfree=%s diskfreelimit=%s\n" % (disk, diskfree, diskfreelimit))

    def get_sockets():
        stotal = status["file_descriptors"]["sockets_limit"]
        sused = status["file_descriptors"]["sockets_used"]

        sockets = percentage(sused, stotal)
        if sockets >= CRIT:
            sys.stdout.write("RabbitMQ Sockets CRITICAL - more than %s%% used sockets | sockets_used=%s sockets_limit=%s\n" % (CRIT, sused, stotal))
            sys.exit(STATE_CRITICAL)
        if sockets >= WARN:
            sys.stdout.write("RabbitMQ Sockets WARNING - more than %s%% used sockets | sockets_used=%s sockets_limit=%s\n" % (WARN, sused, stotal))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Sockets OK - %s%% used sockets | sockets_used=%s sockets_limit=%s\n" % (sockets, sused, stotal))

    def get_processes():
        ptotal = status["processes"]["limit"]
        pused = status["processes"]["used"]

        processes = percentage(pused, ptotal)
        if processes >= CRIT:
            sys.stdout.write("RabbitMQ Processes CRITICAL - more than %s%% used processes | processes_used=%s processes_limit=%s\n" % (CRIT, pused, ptotal))
            sys.exit(STATE_CRITICAL)
        if processes >= WARN:
            sys.stdout.write("RabbitMQ Processes WARNING - more than %s%% used processes | processes_used=%s processes_limit=%s\n" % (WARN, pused, ptotal))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Processes OK - %s%% used processes | processes_used=%s processes_limit=%s\n" % (processes, pused, ptotal))


    def get_file_descriptors():
        fdtotal = status["file_descriptors"]["total_limit"]
        fdused = status["file_descriptors"]["total_used"]

        fd = percentage(fdused, fdtotal)
        if fd >= CRIT:
            sys.stdout.write("RabbitMQ File Descriptors CRITICAL - more than %s%% used file descriptors | fd_total_used=%s fd_total_limit=%s\n" % (CRIT, fdused, fdtotal))
            sys.exit(STATE_CRITICAL)
        if fd >= WARN:
            sys.stdout.write("RabbitMQ File Descriptors WARNING - more than %s%% used file descriptors | fd_total_used=%s fd_total_limit=%s\n" % (WARN, fdused, fdtotal))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ File Descriptors OK - %s%% used file descriptors | fd_total_used=%s fd_total_limit=%s\n" % (fd, fdused, fdtotal))

    # map the inputs to the function blocks
    type = {    'memory' : get_memory,
                  'disk' : get_disk,
               'sockets' : get_sockets,
             'processes' : get_processes,
      'file_descriptors' : get_file_descriptors,
    }

    type[options.type]()

if __name__ == '__main__':
    main()


