#!/usr/bin/env python

# check_rabbitmq_server
#
# Copyright (c) <2017>, <Andrei Buzoianu>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Use the output of rabbitmqctl status to get resource usage of this node

# Author: Andrei Buzoianu <andrei@buzoianu.info>
# 2017-03-28 Version 0.1

import sys
from distutils.spawn import find_executable
from os import getuid
from re import sub
from subprocess import check_output
from erl_terms import decode
from optparse import OptionParser

def main ():
    # Nagios status codes
    STATE_OK = 0
    STATE_WARNING = 1
    STATE_CRITICAL = 2
    STATE_UNKNOWN = 3

    parser = OptionParser(usage="usage: %prog -w limit -c limit", version="%prog 0.1")
    parser.add_option("-t", "--type",dest="type", metavar="STRING", type="string", help="type can be one of the following: memory, disk, sockets, processes or file_descriptors")
    parser.add_option("-w", "--warning", dest="warn", metavar="INT", type="int", help="warning percentage value")
    parser.add_option("-c", "--critical", dest="crit", metavar="INT", type="int", help="critical percentage value")
    (options, args) = parser.parse_args()

    if len(sys.argv[1:]) != 6:
        parser.print_help()
        sys.exit(STATE_UNKNOWN)

    # check for known type
    if not (options.type == 'memory' or options.type == 'disk' or options.type == 'sockets' or options.type == 'processes' or options.type == 'file_descriptors'):
        sys.stdout.write("Status : FAIL - unknown type\n")
        sys.exit(STATE_UNKNOWN)

    # check for valid warning and critical values
    CRIT = int(options.crit)
    WARN = int(options.warn)

    if CRIT < WARN:
        sys.stdout.write("Status : FAIL - Warning value can't be greater than critical value\n")
        sys.exit(STATE_UNKNOWN)

    check_command = ['/usr/sbin/rabbitmqctl', '-q', 'status' ]

    # If non-root run with sudo
    if getuid() != 0:
        check_command.insert(0, find_executable('sudo'))

    try:
        status = check_output(check_command)
    except Exception as exc:
        sys.stdout.write("Status : FAIL\n")
        sys.exit(STATE_UNKNOWN)

    # Join into a single line string then add a period at the end to make it a valid erlang term
    status = ''.join(status.splitlines()) + '.'
    # Remove any literal \n's since the erlang_version item has one in it
    status = sub('(?:\\\\n)+', '',  status)

    # Decode this into a python object
    status = decode(status)

    def percentage(value, whole):
        return 100 * float(value)/float(whole)

    def get_memory():
        for item in status[0]:
            if 'memory' in item:
                for mem_stat in item[1]:
                    if 'total' in mem_stat:
                        tmem = mem_stat[1]
            if 'vm_memory_limit' in item:
                memlimit = item[1]

        mem = percentage(tmem, memlimit)
        if mem >= CRIT:
            sys.stdout.write("RabbitMQ Memory CRITICAL - more than %s%% used memory\n" % (CRIT))
            sys.exit(STATE_CRITICAL)
        if mem >= WARN:
            sys.stdout.write("RabbitMQ Memory WARNING - more than %s%% used memory\n" % (WARN))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Memory OK - %s%% used memory\n" % (mem))

    def get_disk():
        for item in status[0]:
            if 'disk' + '_free' in item:
                diskfree = item[1]
            if 'disk' + '_free_limit' in item:
                diskfreelimit = item[1]
        disk = percentage(diskfreelimit, diskfree)
        if disk >= CRIT:
            sys.stdout.write("RabbitMQ Disk CRITICAL - limit reached %s%% of free disk\n" % (CRIT))
            sys.exit(STATE_CRITICAL)
        if disk >= WARN:
            sys.stdout.write("RabbitMQ Disk WARNING - limit reached %s%% of free disk\n" % (WARN))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Memory OK - %s%% of free disk\n" % (disk))

    def get_sockets():
        for item in status[0]:
            if 'file_descriptors' in item:
                for sockets in item[1]:
                    if 'sockets_limit' in sockets:
                        stotal = sockets[1]
                    if 'sockets_used' in sockets:
                        sused = sockets[1]
        sockets = percentage(sused, stotal)
        if sockets >= CRIT:
            sys.stdout.write("RabbitMQ Sockets CRITICAL - more than %s%% used sockets\n" % (CRIT))
            sys.exit(STATE_CRITICAL)
        if sockets >= WARN:
            sys.stdout.write("RabbitMQ Sockets WARNING - more than %s%% used sockets\n" % (WARN))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Sockets OK - %s%% used sockets\n" % (sockets))

    def get_processes():
        for item in status[0]:
            if 'processes' in item:
                for process in item[1]:
                    if 'limit' in process:
                        ptotal = process[1]
                        print ptotal
                    if 'used' in process:
                        pused = process[1]
                        print pused
        processes = percentage(pused, ptotal)
        if processes >= CRIT:
            sys.stdout.write("RabbitMQ Processes CRITICAL - more than %s%% used processes\n" % (CRIT))
            sys.exit(STATE_CRITICAL)
        if processes >= WARN:
            sys.stdout.write("RabbitMQ Processes WARNING - more than %s%% used processes\n" % (WARN))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ Processes OK - %s%% used processes\n" % (processes))


    def get_file_descriptors():
        for item in status[0]:
            if 'file_descriptors' in item:
                for file_descriptors in item[1]:
                    if 'total_limit' in file_descriptors:
                        fdtotal = file_descriptors[1]
                    if 'total_used' in file_descriptors:
                        fdused = file_descriptors[1]
        fd = percentage(fdused, fdtotal)
        if fd >= CRIT:
            sys.stdout.write("RabbitMQ File Descriptors CRITICAL - more than %s%% used file descriptors\n" % (CRIT))
            sys.exit(STATE_CRITICAL)
        if fd >= WARN:
            sys.stdout.write("RabbitMQ File Descriptors WARNING - more than %s%% used file descriptors\n" % (WARN))
            sys.exit(STATE_WARNING)
        sys.stdout.write("RabbitMQ File Descriptors OK - %s%% used file descriptors\n" % (fd))

    # map the inputs to the function blocks
    type = {    'memory' : get_memory,
                  'disk' : get_disk,
               'sockets' : get_sockets,
             'processes' : get_processes,
      'file_descriptors' : get_file_descriptors,
    }

    type[options.type]()

if __name__ == '__main__':
    main()


