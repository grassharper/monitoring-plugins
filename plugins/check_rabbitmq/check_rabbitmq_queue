#!/usr/bin/env python3

# check_rabbitmq_queue
#
# Copyright (c) <2023>, <Andrei Buzoianu>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Use the output of rabbitmqctl list_queues to read number of ready/unacknowledged messages in a specific queue

# Author: Andrei Buzoianu <andrei@buzoianu.info>
# 2023-01-21 Version 0.3

import sys
import json
from distutils.spawn import find_executable
from os import getuid
from subprocess import check_output
from optparse import OptionParser

def main ():
    # Nagios status codes
    STATE_OK = 0
    STATE_WARNING = 1
    STATE_CRITICAL = 2
    STATE_UNKNOWN = 3

    parser = OptionParser(usage="usage: %prog [-r] [-u] -p vhost -q queue -w limit -c limit", version="%prog 0.3")
    parser.add_option("-r", "--ready", action="store_true", dest="ready", help="get number of ready messages (I'm hunting wabbits)")
    parser.add_option("-u", "--unacked", action="store_true", dest="unacked", help="get number of unacknowledged messages")
    parser.add_option("-p", "--vhost", dest="vhost", metavar="STRING", type="string")
    parser.add_option("-q", "--queue", dest="queue", metavar="STRING", type="string")
    parser.add_option("-w", "--warning", dest="warn", metavar="INT", type="int")
    parser.add_option("-c", "--critical", dest="crit", metavar="INT", type="int")
    (options, args) = parser.parse_args()

    if len(sys.argv[1:]) != 9:
        parser.print_help()
        sys.exit(STATE_UNKNOWN)

    CRIT = int(options.crit)
    WARN = int(options.warn)

    if CRIT < WARN:
        sys.stdout.write("Status : FAIL - Warning value can't be greater than critical value\n")
        sys.exit(STATE_UNKNOWN)

    # construct rabbitmqctl command
    check_command = ['/usr/sbin/rabbitmqctl', '-q', 'list_queues', 'name', 'messages_ready', 'messages_unacknowledged', 'messages',
                     'messages_ready_ram', 'messages_unacknowledged_ram', 'messages_ram', 'messages_persistent', 'message_bytes',
                     'message_bytes_ready', 'message_bytes_unacknowledged', 'message_bytes_ram', 'message_bytes_persistent',
                     'disk_reads', 'disk_writes', 'consumers', 'memory', '--formatter', 'json']

    if options.ready:
        messages = 'ready'
        check_messages = 'messages_ready'

    if options.unacked:
        messages = 'unacknowledged'
        check_messages = 'messages_unacknowledged'

    # match given vhost    
    check_command.append('-p')
    check_command.append(options.vhost)

    # If non-root run with sudo
    if getuid() != 0:
        check_command.insert(0, find_executable('sudo'))

    try:
        queues = check_output(check_command)
    except Exception as exc:
        sys.stdout.write("Status : FAIL\n")
        sys.exit(STATE_UNKNOWN)

    # Decode this into a python object
    queues = json.loads(queues)

    for queue in queues:
        if queue["name"].startswith(options.queue):

            if queue[check_messages] >= CRIT:
                sys.stdout.write("RabbitMQ %s queue CRITICAL - %s %s messages | name=%s messages_ready=%s messages_unacknowledged=%s messages=%s messages_ready_ram=%s messages_unacknowledged_ram=%s messages_ram=%s messages_persistent=%s message_bytes=%s message_bytes_ready=%s message_bytes_unacknowledged=%s message_bytes_ram=%s message_bytes_persistent=%s disk_reads=%s disk_writes=%s consumers=%s memory=%s\n" % (queue["name"], queue[check_messages], messages, queue["name"], queue["messages_ready"], queue["messages_unacknowledged"], queue["messages"], queue["messages_ready_ram"], queue["messages_unacknowledged_ram"], queue["messages_ram"], queue["messages_persistent"], queue["message_bytes"], queue["message_bytes_ready"], queue["message_bytes_unacknowledged"], queue["message_bytes_ram"], queue["message_bytes_persistent"], queue["disk_reads"], queue["disk_writes"], queue["consumers"], queue["memory"]))
                sys.exit(STATE_CRITICAL)
            if queue[check_messages] >= WARN:
                sys.stdout.write("RabbitMQ %s queue WARNING - %s %s messages | name=%s messages_ready=%s messages_unacknowledged=%s messages=%s messages_ready_ram=%s messages_unacknowledged_ram=%s messages_ram=%s messages_persistent=%s message_bytes=%s message_bytes_ready=%s message_bytes_unacknowledged=%s message_bytes_ram=%s message_bytes_persistent=%s disk_reads=%s disk_writes=%s consumers=%s memory=%s\n" % (queue["name"], queue[check_messages], messages, queue["name"], queue["messages_ready"], queue["messages_unacknowledged"], queue["messages"], queue["messages_ready_ram"], queue["messages_unacknowledged_ram"], queue["messages_ram"], queue["messages_persistent"], queue["message_bytes"], queue["message_bytes_ready"], queue["message_bytes_unacknowledged"], queue["message_bytes_ram"], queue["message_bytes_persistent"], queue["disk_reads"], queue["disk_writes"], queue["consumers"], queue["memory"]))
                sys.exit(STATE_WARNING)

            sys.stdout.write("RabbitMQ %s queue OK - %s %s messages | name=%s messages_ready=%s messages_unacknowledged=%s messages=%s messages_ready_ram=%s messages_unacknowledged_ram=%s messages_ram=%s messages_persistent=%s message_bytes=%s message_bytes_ready=%s message_bytes_unacknowledged=%s message_bytes_ram=%s message_bytes_persistent=%s disk_reads=%s disk_writes=%s consumers=%s memory=%s\n" % (queue["name"], queue[check_messages], messages, queue["name"], queue["messages_ready"], queue["messages_unacknowledged"], queue["messages"], queue["messages_ready_ram"], queue["messages_unacknowledged_ram"], queue["messages_ram"], queue["messages_persistent"], queue["message_bytes"], queue["message_bytes_ready"], queue["message_bytes_unacknowledged"], queue["message_bytes_ram"], queue["message_bytes_persistent"], queue["disk_reads"], queue["disk_writes"], queue["consumers"], queue["memory"]))
            sys.exit(STATE_OK)

if __name__ == '__main__':
    main()
