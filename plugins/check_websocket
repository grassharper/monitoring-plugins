#!/usr/bin/env python3

# check_websocket
#
# Copyright (c) <2020>, <Andrei Buzoianu>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Use python-websockets to check websocket health

# Author: Andrei Buzoianu <andrei@buzoianu.info>
# 2020-12-21 Version 0.1

import sys
import asyncio
import websockets
from optparse import OptionParser
from urllib.parse import urlunsplit

def main ():
    # Nagios status codes
    STATE_OK = 0
    STATE_WARNING = 1
    STATE_CRITICAL = 2
    STATE_UNKNOWN = 3

    parser = OptionParser(usage="usage: %prog -s <SCHEME> -H <HOST> -P <PORT> --path <PATH>", version="%prog 0.1")
    parser.add_option("-s", "--scheme", dest="scheme", metavar="STRING", type="string", help="Websocket scheme.")
    parser.add_option("-H", "--host", dest="host", metavar="STRING", type="string", help="Host to be checked.")
    parser.add_option("-P", "--port", dest="port", metavar="INT", type="int", help="Port number")
    parser.add_option("--path", dest="path", metavar="STRING", type="string", help="Path to be checked.")
    (options, args) = parser.parse_args()

    if len(sys.argv[1:]) < 8:
        parser.print_help()
        sys.exit(STATE_UNKNOWN)

    url = urlunsplit((options.scheme, options.host + ':' + str(options.port), options.path, '', ''))

    async def hello():
        try:
            async with websockets.connect(url) as websocket:
                await websocket.send("")
            sys.stdout.write("OK: websocket %s is healthy.\n" % url)
            sys.exit(STATE_OK)
        except websockets.exceptions.InvalidStatusCode as e:
            sys.stdout.write("CRITICAL: websocket %s is not healthy. Error: %s.\n" % (url, e))
            sys.exit(STATE_CRITICAL)
        except Exception:
            sys.stdout.write("CRITICAL: websocket %s is not healthy.\n" % url)
            sys.exit(STATE_CRITICAL)

    #asyncio.get_event_loop().run_until_complete(hello())
    loop = asyncio.get_event_loop()
    result = loop.run_until_complete(hello())

if __name__ == '__main__':
    main()
